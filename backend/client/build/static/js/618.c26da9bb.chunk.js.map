{"version":3,"file":"static/js/618.c26da9bb.chunk.js","mappings":"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","sources":["components/inventory/Inventory.js","helpers/utils.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux'; \r\nimport { updateItem, useDeleteProductMutation, useGetProductsQuery, useTogglePOSMutation, useUpdateStockMutation } from '../../features/centerSlice';\r\nimport { commonApiSlice } from '../../features/centerSlice';\r\nimport {chunk} from '../../helpers/utils';\r\nimport $ from 'jquery';\r\nimport labelImg from '../../asset/images/default.png';\r\nimport toast from 'react-hot-toast';\r\n\r\nfunction Inventory() {\r\n\r\n    const dispatch = useDispatch();\r\n    const tableRef = useRef(); \r\n    const listtableRef = useRef();\r\n\r\n    const [ view, setView] = useState('list');\r\n    const [ hover , setHover ]= useState(true);\r\n\r\n    const [ rowData, setRowData] = useState([]);\r\n    const { currency } = useSelector( state=> state.auth );\r\n    const [ modal, setModal ] = useState(false);\r\n    const { data, isSuccess:gotProducts } = useGetProductsQuery();\r\n    const [ updateStock ] = useUpdateStockMutation();\r\n    const [ deleteProduct ] = useDeleteProductMutation();\r\n    const [ togglePOS ] = useTogglePOSMutation();\r\n\r\n    const handleImgError = e => {\r\n        e.target.src = labelImg\r\n    }\r\n    const [ hovered, setHovered ] = useState('');\r\n    const [ stock, setStock] = useState({id:'',stock:0});\r\n    \r\n    const toggleModal = () => setModal(!modal)\r\n    const [ gridData, setGrid ] = useState([]);\r\n\r\n    useEffect(()=> {\r\n        if(gotProducts) { \r\n            setRowData(data.products)\r\n            setGrid(chunk(data.products.map( ({id, name, image, price, quantity, pos, ...rest }) => ({id, name, image:`http://localhost:5100/images/${image}`, price, quantity, pos })), 3))\r\n        } \r\n        return () => null\r\n    },[ gotProducts, data ])\r\n\r\n\r\n    useEffect(() => {\r\n        $(tableRef.current).DataTable({\r\n            paging: true,\r\n            searching: true,\r\n            info: true,\r\n            ordering: true,\r\n            processing:true,\r\n            lengthMenu:[ 10,25,50]\r\n        });\r\n        $.fn.DataTable.ext.errMode = 'none';\r\n        return () => null\r\n      }, [view, rowData, gotProducts]);\r\n\r\n    useEffect(() => {\r\n        if(rowData.length) {\r\n            $(listtableRef.current).DataTable({\r\n                paging: true,\r\n                searching: true,\r\n                info: true,\r\n                ordering: true,\r\n                lengthMenu:[ 10,25,50 ]\r\n            });\r\n        }\r\n        $.fn.DataTable.ext.errMode = 'none';\r\n        return ()=> $(listtableRef.current).DataTable().destroy()\r\n        \r\n    }, [view, rowData]);\r\n\r\n    const handleView = view => {\r\n        if(view==='grid') {\r\n            $(listtableRef.current).DataTable().destroy();\r\n        } else {\r\n            $(tableRef.current).DataTable().destroy();\r\n        }\r\n        setView(view)\r\n    }\r\n\r\n    const handleStock = e => {\r\n        let { id }= e.target.dataset\r\n        setStock({id, stock: e.target.value})\r\n    }\r\n\r\n    const manageStock = async() => {\r\n\r\n        if(!stock.stock) return setHover('');\r\n        const product = rowData.find( item => item.id === parseInt(stock.id));\r\n        try {\r\n            await updateStock({ id: stock.id, updated: {...product, quantity: stock.stock } }).unwrap()\r\n            setHover('');\r\n        } catch (error) {\r\n            toast.error(\"Something went wrong!\");  \r\n        }\r\n\r\n    }\r\n \r\n    const showInPOS = async (e) => {\r\n        let {id, status} = e.target.dataset;\r\n        let stat = parseInt(status) ? 0 : 1; \r\n        e.preventDefault();\r\n        try {\r\n            let res = await togglePOS({id, status:stat}).unwrap()\r\n            if (res.status) e.target.checked = stat\r\n        } catch (error) {\r\n            console.log(\"Exception on first sight:- \"+ error.message )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={\"row w-100 h-100 mt-4\"}>\r\n                <div className=\"col-lg-12 grid-margin stretch-card\">\r\n                    <div className=\"card\">\r\n                        <form id=\"filter-form\">\r\n                            <div className=\"card-header\">\r\n                                    <div style={{display:'flex',alignItems:'end',justifyContent:'space-between'}}>\r\n                                    <div/> \r\n                                    <div className=\"d-flex flex-end\" style={{width:'140px',justifyContent:'space-around',alignItems:'center'}}>\r\n                                        <button type=\"button\" className={`btn btn-outline-light btn-sm`} style={{ backgroundColor:view==='grid' && '#55aaad', color: view=== 'grid' && '#fff' }} onClick={()=>handleView('grid')} > Grid </button>\r\n                                        <button type=\"button\" className={`btn btn-outline-light btn-sm`} style={{ backgroundColor:view==='list' && '#55aaad',color: view=== 'list' &&'#fff' }} onClick={()=>handleView('list')} > List </button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                        <div className=\"card-body\" style={{ height:'200%',width:'100%' }}>\r\n                            {view==='list' && <table className='table' ref={listtableRef}>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Price</th>\r\n                                        <th>Barcode</th>\r\n                                        <th>Weight</th>\r\n                                        <th>Quantity</th>\r\n                                        <th>POS status</th>\r\n                                        <th>Image</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {rowData.map( row => <tr key={row.id}> \r\n                                        <td onMouseOver={()=>setHovered('')}>{row.name}</td>\r\n                                        <td onMouseOver={()=>setHovered('')}>{currency +' '+row.price}</td>\r\n                                        <td onMouseOver={()=>setHovered('')}>{row.code}</td>\r\n                                        <td onMouseOver={()=>setHovered('')}>{row.weight}</td>\r\n                                        <td className='position-relative' onMouseOver={()=>setHovered('')}>\r\n                                            <input className='input' data-id={row.id} onChange={handleStock} readOnly={hover!==row.id} defaultValue={row.quantity} />\r\n                                            <span onClick={hover!==row.id ?  ()=>setHover(row.id): ()=> manageStock()} className='position-absolute btn btn-sm btn-rounded btn-success' style={{right:60}}>{hover===row.id ? 'Save': 'Edit'}</span>\r\n                                        </td>\r\n                                        <td onMouseOver={()=>setHovered('')}>\r\n                                            <input type='checkbox' name='status' onClick={showInPOS} data-status={row.pos} data-id={row.id} className='pos' id={`tabular-${row.id}`} defaultChecked={row.pos}/>\r\n                                            <label htmlFor={`tabular-${row.id}`} />\r\n                                            <div className='plate'></div>\r\n                                        </td>\r\n                                        <td className='position-relative img'>\r\n                                            <img \r\n                                                className='img-fluid img-thumbnail'\r\n                                                src={`http://localhost:5100/images/${row.image}`} \r\n                                                onMouseEnter={()=>setHovered(row.id)}\r\n                                                onError={handleImgError}\r\n                                                alt=''\r\n                                            />\r\n                                            {\r\n                                                hovered === row.id && <div className='image-container' style={{backgroundImage:`url(http://localhost:5100/images/${row.image})`, backgroundSize:'cover', backgroundRepeat:'no-repeat'}}></div>\r\n                                            }\r\n                                        </td>\r\n                                    </tr>)}\r\n                                </tbody>\r\n                            </table>}\r\n                            {view === 'grid' && (\r\n                                <table ref={tableRef} className='table grid-view'>\r\n                                    <thead>\r\n                                        <tr className='d-none'>\r\n                                            <th>Col</th>\r\n                                            <th>Col</th>\r\n                                            <th>Col</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {gridData.map( (chunk,i) => <tr key={i}>\r\n                                            { chunk.map( row => (<td key={row.id} colSpan={ chunk.length < 3 ? chunk.length: 0 }> <div className={`card-body d-flex grid-view`} >\r\n                                                <div className={`col-9 d-block`}>\r\n                                                    <div className={`row`}>\r\n                                                        <strong className=\"wrapped-text\">{row.name}<span className={`tooltiptext`}>{row.name}</span></strong>\r\n                                                        <div className=\"row\">\r\n                                                            <b>Quantity: {row.quantity}</b>\r\n                                                            <input className=\"input d-none\" data-id={row.id} style={{width:80}} />\r\n                                                        </div>\r\n                                                        <div className=\"row d-flex\">\r\n                                                            <div className=\"align-self-center\">POS</div>\r\n                                                        </div>\r\n                                                        <div>\r\n                                                            <input type=\"checkbox\" name=\"pos\" className='pos' data-id={row.id} data-status={row.pos} onClick={showInPOS} id={`id-${row.id}`} defaultChecked={row.pos} />\r\n                                                            <label htmlFor={`id-${row.id}`} />\r\n                                                            <div className=\"plate\"></div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className=\"col-3 text-center\">\r\n                                                    <img src={row.image}  alt=''/>\r\n                                                </div>\r\n                                            </div></td>)) }    \r\n                                        </tr>)}\r\n                                    </tbody>\r\n                                </table>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Inventory","import $ from 'jquery'\r\nimport toast from 'react-hot-toast';\r\nconst daysOfWeek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\nexport const validate = (fields,exceptions=[]) => {\r\n    let result={}\r\n    var shouldGo=true;\r\n    if(exceptions.length)\r\n    {\r\n        exceptions.forEach( item => {\r\n            delete fields[item]\r\n        })\r\n    }\r\n    Object.keys(fields).forEach(f =>\r\n    {\r\n        let shout = '';\r\n        let invalid = false;\r\n        let tInputs = [$(`input[name=${f}]`), $(`select[name=${f}]`), $(`textarea[name=${f}]`), $(`.${f}`)]\r\n        if(fields[f]==null || fields[f].length===0)\r\n        {\r\n            result[f]=`Required!`;\r\n            shouldGo=false;\r\n            invalid = true;\r\n        }\r\n        tInputs.forEach( input => {\r\n\r\n            let minLength = $(input).attr('type')!== 'date' ? $(input).attr('min'): 0;\r\n            let maxLength = $(input).attr('max');\r\n            let type = $(input).attr('cast');\r\n            let isDate = $(input).attr('type')==='date' && $(input).attr('req');\r\n            if($(input).val()?.length && (minLength || maxLength))\r\n            {\r\n                if($(input).val().length < parseInt(minLength))\r\n                { \r\n                    invalid = true;\r\n                    shout = `Should be of at least ${minLength} characters!`\r\n                    result[f] = shout;\r\n                }\r\n                if($(input).val().length > parseInt(maxLength))\r\n                { \r\n                    invalid = true;\r\n                    shout = `Should not be greater than ${maxLength} characters!`;\r\n                    result[f] = shout;\r\n                }\r\n            }\r\n            if(type)\r\n            { \r\n                if(input.val() && type === 'num')\r\n                {\r\n                    if(parseInt($(input).val().length )!== $(input).val().length) {\r\n                        shout= `Should be in numbers!`;\r\n                        invalid = true;\r\n                        result[f]= shout; \r\n                    }\r\n                }\r\n                if( $(input).val() && type=== 'str' )\r\n                {\r\n                    if( /^([^0-9]*)$/.test($(input).val())===false )\r\n                    {\r\n                        shout= `Should not contain numbers!`;\r\n                        invalid = true;\r\n                        result[f]= shout; \r\n                    }\r\n                }\r\n            }\r\n            if(isDate)\r\n            {\r\n                if(!isValidDate($(input).val(),18))\r\n                {\r\n                    invalid = true\r\n                    shout = 'Invalid date';\r\n                    result[f] = shout;\r\n                } else {\r\n                    shout = '';\r\n                }\r\n                // return\r\n            }\r\n            if(shout)   \r\n            {\r\n                if($(input).parents('.col-md-12, .col').find('small.text-danger').length)\r\n                {\r\n                    $(input).parents('.col-md-12, .col').find('small.text-danger').text(shout)\r\n                } else {\r\n                    $(input).parents('.col-md-12, .col').append('<small class=\"text-danger\">'+shout+'</small>')\r\n                }\r\n            } else {\r\n                $(input).parents('.col-md-12, .col').find('small.text-danger').remove()\r\n            }\r\n            if(invalid){\r\n                shouldGo = false;\r\n                $(input).addClass('placeholder-error')\r\n                .attr('placeholder',result[f]).css('border','1px solid red');\r\n            } else {\r\n                $(input).removeClass('placeholder-error').attr('placeholder',result[f]).css('border','');\r\n            }\r\n        })\r\n    })\r\n    return {result, shouldGo};\r\n}\r\n\r\nexport const getCurrentDate = (delimiter='-') => {\r\n    const today = new Date();\r\n    const year = today.getFullYear();\r\n    const month = String(today.getMonth() + 1).padStart(2, '0'); // Months are 0-based\r\n    const day = String(today.getDate()).padStart(2, '0');\r\n    return `${year+delimiter+month+delimiter+day}`;\r\n}\r\n\r\nexport const formatDate = (date=null,format='Ymd') => {\r\n    const dateObj = date?new Date(date): new Date();\r\n    const year = dateObj.getFullYear();\r\n    const month = String(dateObj.getMonth() + 1).padStart(2, '0'); // Months are 0-based\r\n    const day = String(dateObj.getDate()).padStart(2, '0');\r\n    if(format[0]==='Y')\r\n    {\r\n        return `${year}-${month}-${day}`;\r\n    }\r\n    if(format[0]==='d')\r\n    {\r\n        return `${day}-${month}-${year}`;\r\n    }\r\n}\r\n\r\nexport const getCurrentDay = () => {\r\n    return daysOfWeek[(new Date()).getDay()];\r\n}\r\n\r\nexport const getCurrentTime = () => {\r\n    const currentDate = new Date();\r\n    const hours = String(currentDate.getHours()).padStart(2, '0');\r\n    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r\n    const seconds = String(currentDate.getSeconds()).padStart(2, '0');\r\n    return `${hours}:${minutes}:${seconds}`;\r\n}\r\nexport const toBase64 = blob => {\r\n\r\n}\r\n\r\nexport const dataURLtoFile = (dataurl, filename) => {\r\n    var arr = dataurl.split(','),\r\n        mime = arr[0].match(/:(.*?);/)[1],\r\n        bstr = atob(arr[arr.length - 1]), \r\n        n = bstr.length, \r\n        u8arr = new Uint8Array(n);\r\n    while(n--){\r\n        u8arr[n] = bstr.charCodeAt(n);\r\n    }\r\n    return new File([u8arr], filename, {type:mime});\r\n}\r\n\r\nexport const isValidDate = ( date, range ) => {\r\n    let today = getCurrentDate();\r\n    let year = today.split('-')[0];\r\n    let intended = new Date(today.replace(year, (parseInt(year)-range)));\r\n    return intended > new Date(date)\r\n}\r\n\r\nexport const capitalFirst = (string) => {\r\n    if (!string) return string; // Handle empty or null strings\r\n    if(string.includes(' ')){\r\n        let str= '';\r\n        string.split(' ').forEach( part => {\r\n           str+=' '+ part.charAt(0).toUpperCase() + part.slice(1); \r\n        })\r\n        return str;\r\n    }\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\nexport const getDocumentName = id => {\r\n\r\n    const documents = {\r\n        1 : 'VISIT PHOTO',\r\n        2 : 'AADHAAR CARD',\r\n        3 : 'VOTER CARD',\r\n        4 : 'GROUP PHOTO',\r\n        5 : 'CGT_FIRST',\r\n        6 : 'CGT_SECOND',\r\n        7 : 'CIBIL',\r\n        8 : 'SANCTION LETTER',\r\n        9 : 'KYC',\r\n        10 : 'BANK PASSBOOK',\r\n        11 : 'RELATION PROOF DOCUMENT',\r\n    }\r\n    return documents[id];\r\n    \r\n}\r\n\r\nexport const Warning = msg => {\r\n    return toast(msg,\r\n        {\r\n          icon: '⚠️',\r\n          style: {\r\n            borderRadius: '10px',\r\n            background: '#333',\r\n            color: '#fff',\r\n          },\r\n        }\r\n    );\r\n}\r\n\r\nexport const hexToRgb = (hex) => {\r\n    // Remove the '#' if present\r\n\r\n    if(!hex || typeof hex == 'object'){\r\n        return hex\r\n    }\r\n\r\n    hex = hex.replace(/^#/, '');\r\n    // Convert shorthand hex (e.g., #03F) to full form (e.g., #0033FF)\r\n    if (hex.length === 3) {\r\n        hex = hex.split('').map(h => h + h).join('');\r\n    }\r\n    // Convert hex to RGB\r\n    const r = parseInt(hex.slice(0, 2), 16);\r\n    const g = parseInt(hex.slice(2, 4), 16);\r\n    const b = parseInt(hex.slice(4, 6), 16);\r\n\r\n    return { r, g, b };\r\n}\r\n\r\nexport const isColorDark = (hexColor) => {\r\n    // Convert hex color to RGB\r\n    let output = hexToRgb(hexColor)\r\n    if(output === undefined) return hexColor\r\n    const { r, g, b } = output\r\n\r\n    // Calculate the luminance\r\n    const luminance = 0.299 * r + 0.587 * g + 0.114 * b;\r\n\r\n    // Return true if the color is dark, else false\r\n    return luminance < 128;\r\n}\r\n\r\nexport function chunk(array, size, uncategorized = false) {\r\n    const result = [];\r\n    if(!array) return []\r\n    if(uncategorized) array.unshift({})\r\n    for (let i = 0; i < array.length; i += size) {\r\n        // Use slice to get a chunk of the specified size and push it to the result array\r\n        result.push(array.slice(i, i + size));\r\n    }\r\n    return result;\r\n}\r\n\r\nexport const wrapText = (text, maxLength) => {\r\n\r\n    if (text?.length > maxLength) {\r\n        let truncatedText = text.substring(0, maxLength) + '...';\r\n        return truncatedText;\r\n    }\r\n    return text\r\n}\r\n\r\nexport const formatDatefromTimestamp = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are zero-based\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    const hours = String(date.getHours()).padStart(2, '0');\r\n    const minutes = String(date.getMinutes()).padStart(2, '0');\r\n    const seconds = String(date.getSeconds()).padStart(2, '0');\r\n    return `${year}-${month}-${day} ${hours}:${minutes}`;\r\n};\r\n  "],"names":["useDispatch","tableRef","useRef","listtableRef","view","setView","useState","hover","setHover","rowData","setRowData","currency","useSelector","state","auth","modal","setModal","data","isSuccess","gotProducts","useGetProductsQuery","updateStock","useUpdateStockMutation","deleteProduct","useDeleteProductMutation","togglePOS","useTogglePOSMutation","handleImgError","e","target","src","labelImg","hovered","setHovered","stock","setStock","id","gridData","setGrid","useEffect","products","chunk","map","_ref","name","image","price","quantity","pos","_objectWithoutProperties","_excluded","concat","$","current","DataTable","paging","searching","info","ordering","processing","lengthMenu","ext","errMode","length","destroy","handleView","handleStock","dataset","value","showInPOS","async","status","stat","parseInt","preventDefault","unwrap","checked","error","console","log","message","_jsx","_Fragment","children","className","_jsxs","style","display","alignItems","justifyContent","width","type","backgroundColor","color","onClick","height","ref","row","onMouseOver","code","weight","onChange","readOnly","defaultValue","product","find","item","updated","_objectSpread","toast","manageStock","right","defaultChecked","htmlFor","onMouseEnter","onError","alt","backgroundImage","backgroundSize","backgroundRepeat","i","colSpan","dataURLtoFile","dataurl","filename","arr","split","mime","match","bstr","atob","n","u8arr","Uint8Array","charCodeAt","File","capitalFirst","string","includes","str","forEach","part","charAt","toUpperCase","slice","Warning","msg","icon","borderRadius","background","hexToRgb","hex","replace","h","join","r","g","b","isColorDark","hexColor","output","undefined","array","size","result","arguments","unshift","push","wrapText","text","maxLength","substring","formatDatefromTimestamp","timestamp","date","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","getSeconds"],"sourceRoot":""}