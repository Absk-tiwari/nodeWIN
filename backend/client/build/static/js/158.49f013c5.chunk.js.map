{"version":3,"file":"static/js/158.49f013c5.chunk.js","mappings":"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","sources":["components/order/Report.js","helpers/utils.js"],"sourcesContent":["import axios from 'axios';\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport $ from 'jquery'\r\nimport { formatDatefromTimestamp } from '../../helpers/utils';\r\nimport toast from 'react-hot-toast';\r\n\r\nfunction Report() {\r\n    const tableRef = useRef(null);\r\n    const [reports, setReports] = useState([])\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(()=> {\r\n        axios.get(`orders/reports`).then(({data}) => {\r\n            setReports(data.reports)\r\n        }).catch(()=> {})\r\n    },[])\r\n\r\n    useEffect(()=> {\r\n        \r\n        $(tableRef.current).DataTable({\r\n            data: reports,\r\n            columns:[\r\n                { title:'ID', data:'id'},\r\n                { title:'Generated On', data:null, render: row => formatDatefromTimestamp(row.date)},\r\n                { title:\"Action\", data:null, render:row => `<a target=\"_blank\" class=\"text-decoration-none\" href=\"http://localhost:5100/images/${row.path}\" download type=\"button\" data-index=\"${reports.indexOf(row)}\">View</a>\r\n                <span data-id=\"${row.id}\" class=\" ms-4 btn btn-sm text-danger btn-rounded del\">Delete</span>` },\r\n            ],\r\n            paging: true,\r\n            searching: true,\r\n            info: true,\r\n            ordering: false,\r\n            pageLength: 40\r\n        });\r\n\r\n        $(tableRef.current).on('click', '.del', function(e){\r\n            const ID = this.dataset.id\r\n            axios.get(`orders/remove-report/${ID}`).then(({data}) => {\r\n                if(data.status) {\r\n                    toast.success(data.message)\r\n                    setReports(reports.filter( i => i.id!== parseInt(ID)))\r\n                } else {\r\n                    toast.error(data.message)\r\n                }\r\n            }).catch(()=> toast.error(\"Something went wrong!\"))\r\n        })\r\n\r\n        return () => {\r\n            $(tableRef.current).off('click', '.del')\r\n            $(tableRef.current).DataTable().destroy()\r\n        }\r\n\r\n    },[reports])\r\n\r\n    return (\r\n    <div className=\"content-wrapper\" style={{width:'100%'}}>\r\n        <div className=\"row\">\r\n            <div className=\"col-lg-12 grid-margin stretch-card\">\r\n                <div className=\"card mt-5\">\r\n                    <div className=\"card-body\">\r\n                        <div className=\"table-responsive\">\r\n                            <table className=\"table table-hover table-bordered\" ref={tableRef} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Report","import $ from 'jquery'\r\nimport toast from 'react-hot-toast';\r\nconst daysOfWeek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\nexport const validate = (fields,exceptions=[]) => {\r\n    let result={}\r\n    var shouldGo=true;\r\n    if(exceptions.length)\r\n    {\r\n        exceptions.forEach( item => {\r\n            delete fields[item]\r\n        })\r\n    }\r\n    Object.keys(fields).forEach(f =>\r\n    {\r\n        let shout = '';\r\n        let invalid = false;\r\n        let tInputs = [$(`input[name=${f}]`), $(`select[name=${f}]`), $(`textarea[name=${f}]`), $(`.${f}`)]\r\n        if(fields[f]==null || fields[f].length===0)\r\n        {\r\n            result[f]=`Required!`;\r\n            shouldGo=false;\r\n            invalid = true;\r\n        }\r\n        tInputs.forEach( input => {\r\n\r\n            let minLength = $(input).attr('type')!== 'date' ? $(input).attr('min'): 0;\r\n            let maxLength = $(input).attr('max');\r\n            let type = $(input).attr('cast');\r\n            let isDate = $(input).attr('type')==='date' && $(input).attr('req');\r\n            if($(input).val()?.length && (minLength || maxLength))\r\n            {\r\n                if($(input).val().length < parseInt(minLength))\r\n                { \r\n                    invalid = true;\r\n                    shout = `Should be of at least ${minLength} characters!`\r\n                    result[f] = shout;\r\n                }\r\n                if($(input).val().length > parseInt(maxLength))\r\n                { \r\n                    invalid = true;\r\n                    shout = `Should not be greater than ${maxLength} characters!`;\r\n                    result[f] = shout;\r\n                }\r\n            }\r\n            if(type)\r\n            { \r\n                if(input.val() && type === 'num')\r\n                {\r\n                    if(parseInt($(input).val().length )!== $(input).val().length) {\r\n                        shout= `Should be in numbers!`;\r\n                        invalid = true;\r\n                        result[f]= shout; \r\n                    }\r\n                }\r\n                if( $(input).val() && type=== 'str' )\r\n                {\r\n                    if( /^([^0-9]*)$/.test($(input).val())===false )\r\n                    {\r\n                        shout= `Should not contain numbers!`;\r\n                        invalid = true;\r\n                        result[f]= shout; \r\n                    }\r\n                }\r\n            }\r\n            if(isDate)\r\n            {\r\n                if(!isValidDate($(input).val(),18))\r\n                {\r\n                    invalid = true\r\n                    shout = 'Invalid date';\r\n                    result[f] = shout;\r\n                } else {\r\n                    shout = '';\r\n                }\r\n                // return\r\n            }\r\n            if(shout)   \r\n            {\r\n                if($(input).parents('.col-md-12, .col').find('small.text-danger').length)\r\n                {\r\n                    $(input).parents('.col-md-12, .col').find('small.text-danger').text(shout)\r\n                } else {\r\n                    $(input).parents('.col-md-12, .col').append('<small class=\"text-danger\">'+shout+'</small>')\r\n                }\r\n            } else {\r\n                $(input).parents('.col-md-12, .col').find('small.text-danger').remove()\r\n            }\r\n            if(invalid){\r\n                shouldGo = false;\r\n                $(input).addClass('placeholder-error')\r\n                .attr('placeholder',result[f]).css('border','1px solid red');\r\n            } else {\r\n                $(input).removeClass('placeholder-error').attr('placeholder',result[f]).css('border','');\r\n            }\r\n        })\r\n    })\r\n    return {result, shouldGo};\r\n}\r\n\r\nexport const getCurrentDate = (delimiter='-') => {\r\n    const today = new Date();\r\n    const year = today.getFullYear();\r\n    const month = String(today.getMonth() + 1).padStart(2, '0'); // Months are 0-based\r\n    const day = String(today.getDate()).padStart(2, '0');\r\n    return `${year+delimiter+month+delimiter+day}`;\r\n}\r\n\r\nexport const formatDate = (date=null,format='Ymd') => {\r\n    const dateObj = date?new Date(date): new Date();\r\n    const year = dateObj.getFullYear();\r\n    const month = String(dateObj.getMonth() + 1).padStart(2, '0'); // Months are 0-based\r\n    const day = String(dateObj.getDate()).padStart(2, '0');\r\n    if(format[0]==='Y')\r\n    {\r\n        return `${year}-${month}-${day}`;\r\n    }\r\n    if(format[0]==='d')\r\n    {\r\n        return `${day}-${month}-${year}`;\r\n    }\r\n}\r\n\r\nexport const getCurrentDay = () => {\r\n    return daysOfWeek[(new Date()).getDay()];\r\n}\r\n\r\nexport const getCurrentTime = () => {\r\n    const currentDate = new Date();\r\n    const hours = String(currentDate.getHours()).padStart(2, '0');\r\n    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r\n    const seconds = String(currentDate.getSeconds()).padStart(2, '0');\r\n    return `${hours}:${minutes}:${seconds}`;\r\n}\r\nexport const toBase64 = blob => {\r\n\r\n}\r\n\r\nexport const dataURLtoFile = (dataurl, filename) => {\r\n    var arr = dataurl.split(','),\r\n        mime = arr[0].match(/:(.*?);/)[1],\r\n        bstr = atob(arr[arr.length - 1]), \r\n        n = bstr.length, \r\n        u8arr = new Uint8Array(n);\r\n    while(n--){\r\n        u8arr[n] = bstr.charCodeAt(n);\r\n    }\r\n    return new File([u8arr], filename, {type:mime});\r\n}\r\n\r\nexport const isValidDate = ( date, range ) => {\r\n    let today = getCurrentDate();\r\n    let year = today.split('-')[0];\r\n    let intended = new Date(today.replace(year, (parseInt(year)-range)));\r\n    return intended > new Date(date)\r\n}\r\n\r\nexport const capitalFirst = (string) => {\r\n    if (!string) return string; // Handle empty or null strings\r\n    if(string.includes(' ')){\r\n        let str= '';\r\n        string.split(' ').forEach( part => {\r\n           str+=' '+ part.charAt(0).toUpperCase() + part.slice(1); \r\n        })\r\n        return str;\r\n    }\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\nexport const getDocumentName = id => {\r\n\r\n    const documents = {\r\n        1 : 'VISIT PHOTO',\r\n        2 : 'AADHAAR CARD',\r\n        3 : 'VOTER CARD',\r\n        4 : 'GROUP PHOTO',\r\n        5 : 'CGT_FIRST',\r\n        6 : 'CGT_SECOND',\r\n        7 : 'CIBIL',\r\n        8 : 'SANCTION LETTER',\r\n        9 : 'KYC',\r\n        10 : 'BANK PASSBOOK',\r\n        11 : 'RELATION PROOF DOCUMENT',\r\n    }\r\n    return documents[id];\r\n    \r\n}\r\n\r\nexport const Warning = msg => {\r\n    return toast(msg,\r\n        {\r\n          icon: '⚠️',\r\n          style: {\r\n            borderRadius: '10px',\r\n            background: '#333',\r\n            color: '#fff',\r\n          },\r\n        }\r\n    );\r\n}\r\n\r\nexport const hexToRgb = (hex) => {\r\n    // Remove the '#' if present\r\n\r\n    if(!hex || typeof hex == 'object'){\r\n        return hex\r\n    }\r\n\r\n    hex = hex.replace(/^#/, '');\r\n    // Convert shorthand hex (e.g., #03F) to full form (e.g., #0033FF)\r\n    if (hex.length === 3) {\r\n        hex = hex.split('').map(h => h + h).join('');\r\n    }\r\n    // Convert hex to RGB\r\n    const r = parseInt(hex.slice(0, 2), 16);\r\n    const g = parseInt(hex.slice(2, 4), 16);\r\n    const b = parseInt(hex.slice(4, 6), 16);\r\n\r\n    return { r, g, b };\r\n}\r\n\r\nexport const isColorDark = (hexColor) => {\r\n    // Convert hex color to RGB\r\n    let output = hexToRgb(hexColor)\r\n    if(output === undefined) return hexColor\r\n    const { r, g, b } = output\r\n\r\n    // Calculate the luminance\r\n    const luminance = 0.299 * r + 0.587 * g + 0.114 * b;\r\n\r\n    // Return true if the color is dark, else false\r\n    return luminance < 128;\r\n}\r\n\r\nexport function chunk(array, size, uncategorized = false) {\r\n    const result = [];\r\n    if(!array) return []\r\n    if(uncategorized) array.unshift({})\r\n    for (let i = 0; i < array.length; i += size) {\r\n        // Use slice to get a chunk of the specified size and push it to the result array\r\n        result.push(array.slice(i, i + size));\r\n    }\r\n    return result;\r\n}\r\n\r\nexport const wrapText = (text, maxLength) => {\r\n\r\n    if (text?.length > maxLength) {\r\n        let truncatedText = text.substring(0, maxLength) + '...';\r\n        return truncatedText;\r\n    }\r\n    return text\r\n}\r\n\r\nexport const formatDatefromTimestamp = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are zero-based\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    const hours = String(date.getHours()).padStart(2, '0');\r\n    const minutes = String(date.getMinutes()).padStart(2, '0');\r\n    const seconds = String(date.getSeconds()).padStart(2, '0');\r\n    return `${year}-${month}-${day} ${hours}:${minutes}`;\r\n};\r\n  \r\nexport const f = value => parseFloat(value).toFixed(2)"],"names":["tableRef","useRef","reports","setReports","useState","useDispatch","useEffect","axios","get","then","_ref","data","catch","$","current","DataTable","columns","title","render","row","formatDatefromTimestamp","date","concat","path","indexOf","id","paging","searching","info","ordering","pageLength","on","e","ID","this","dataset","_ref2","status","toast","success","message","filter","i","parseInt","error","off","destroy","_jsx","className","style","width","children","ref","dataURLtoFile","dataurl","filename","arr","split","mime","match","bstr","atob","length","n","u8arr","Uint8Array","charCodeAt","File","type","capitalFirst","string","includes","str","forEach","part","charAt","toUpperCase","slice","Warning","msg","icon","borderRadius","background","color","hexToRgb","hex","replace","map","h","join","r","g","b","isColorDark","hexColor","output","undefined","chunk","array","size","result","arguments","unshift","push","wrapText","text","maxLength","substring","timestamp","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","getSeconds","f","value","parseFloat","toFixed"],"sourceRoot":""}