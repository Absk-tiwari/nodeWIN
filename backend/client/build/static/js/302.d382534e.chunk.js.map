{"version":3,"file":"static/js/302.d382534e.chunk.js","mappings":"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","sources":["components/pos/Payment.js","helpers/utils.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { commonApiSlice, useGetNotesQuery } from '../../features/centerSlice';\r\nimport pos from '../../asset/images/logo.png'\r\nimport { f, Warning } from '../../helpers/utils';\r\nimport axios from 'axios';\r\nimport toast from 'react-hot-toast';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { useSearch } from '../../contexts/SearchContext';\r\n\r\nlet RETURNS=0\r\nexport default function Payment() \r\n{\r\n    const headers = {\r\n        'Content-Type' : 'application/json',\r\n        'pos-token': localStorage.getItem('pos-token')\r\n    }\r\n    const targetDiv = useRef(null);\r\n    const chosenStyle  = {\r\n        marginTop:'.5rem',\r\n        alignItems: 'center',\r\n        borderRadius: 10,\r\n        border:\"2px dashed\",\r\n        minHeight: '20px',\r\n        backgroundColor: '#fff',\r\n        position: 'relative'\r\n    }\r\n    const navigate = useNavigate();\r\n    const {active} = useParams();\r\n    const [receiptOn, setReceipt] = useState(JSON.parse(localStorage.getItem('prt_receipt')??'false'));\r\n    const { data, isSuccess } = useGetNotesQuery();\r\n    const { setSession, sessions, sale, setType } = useSearch();\r\n    const [ byAll, setByAll ] = useState({Cash:0, Card:0, Account:0});\r\n    const dispatch = useDispatch();\r\n    const mode = { width:'96%', cursor:'pointer' }\r\n    const { currency, cartProducts, openingCash, cartStocks } = useSelector(state => state.auth );\r\n    const [ notes, setNotes] = useState([]);\r\n    const [ paymentMethod, setPaymentMethod ] = useState([]);\r\n    const [ paidAmount, setPaid ] = useState(byAll.Cash + byAll.Card + byAll.Account);\r\n    const [ KartProducts, setKartProducts] = useState([]);\r\n    const [ currentMethod, setCurrentMethod ] = useState('');\r\n   \r\n    const [ number, setNumber ] = useState('');\r\n\r\n    const choosePaymentMethod = (method, note=false) => {\r\n        if( note ) {\r\n            let previous = byAll.Cash;\r\n            previous = parseFloat(previous);\r\n            if(total < 0) {\r\n                setByAll({...byAll, Cash: ( previous - parseInt(note) ) });\r\n            } else {\r\n                setByAll({...byAll, Cash: ( previous + parseInt(note) ) });\r\n            }\r\n        } else {\r\n            let fillAmt = total - paid();\r\n            if( fillAmt <= total ){\r\n                setByAll(() => ({ ...byAll, [method]: fillAmt.toFixed(2) }));\r\n            }\r\n            setPaid(() => (byAll.Cash+ byAll.Card + byAll.Account));\r\n        }\r\n        if( !paymentMethod.includes(method) ) {\r\n            setPaymentMethod([ ...paymentMethod, method ]);\r\n        }\r\n        setCurrentMethod(method);\r\n        setNumber('');\r\n    }\r\n\r\n    const changeInput = input => {\r\n        let newAmount\r\n        if(input!=='.') {\r\n            newAmount = number + input;  \r\n            setNumber(number + input);\r\n            setByAll({...byAll, [currentMethod]:newAmount});\r\n        }\r\n    }\r\n\r\n    const showTotal = () => {\r\n        let additions=0;\r\n        let returns=0;\r\n        if(cartProducts[active]?.length || KartProducts[active]?.length) {\r\n            if(cartProducts[active]?.length) {\r\n                additions = cartProducts[active].filter( _ => _.return === undefined)\r\n                returns = cartProducts[active].filter( _ => _.return === true)\r\n            } else {\r\n                additions = KartProducts[active].filter( _ => _.return === undefined)\r\n                returns = KartProducts[active].filter( _ => _.return === true)\r\n            }\r\n            additions = additions.reduce((acc, cur)=> acc + (cur.stock * parseFloat(cur.price)),0)\r\n            returns = returns.reduce((acc, cur)=> acc + (cur.stock * parseFloat(cur.price)),0)\r\n        }\r\n        RETURNS = returns\r\n        return parseFloat(additions - returns)\r\n    }\r\n\r\n    const total = showTotal()\r\n    \r\n    const takeSnipAndPrint = async () => {\r\n        const elem = targetDiv.current;\r\n        if(!elem) return toast.error(`Sorry can't go further...`);\r\n        try {\r\n            if(window.electronAPI){\r\n                window.electronAPI.printContent({html:elem.innerHTML, id: active+':'+openingCash.id});\r\n            } else {\r\n                Warning(\"Printer not connected!\")\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error capturing image:\", error);\r\n        }\r\n    }\r\n\r\n    const initPayment = async () => \r\n    {\r\n        if(total===0) return navigate('/pos')\r\n        let paidAmount = parseFloat(byAll.Cash) + parseFloat(byAll.Card) + parseFloat(byAll.Account)\r\n        if(total > 0 && paidAmount < total.toFixed(2)) {\r\n            return Warning(\"Pay the remaining amount!\");\r\n        }\r\n        if(total < 0) {\r\n            if(f(paidAmount) < f(total)) {\r\n                return Warning(\"Return the remaining amount!\")\r\n            }\r\n        }\r\n        // dispatch({ type:\"LOADING\" })\r\n        let cashForDrawer = total.toFixed(2);\r\n        let reducible = parseFloat(byAll.Card);\r\n        if(reducible > 0 && reducible > total.toFixed(2)) {\r\n            reducible = reducible - total.toFixed(2)\r\n            cashForDrawer-= reducible\r\n        }\r\n        let thruAC = parseFloat(byAll.Account);\r\n        if(thruAC > 0 && thruAC > total.toFixed(2)) {\r\n            thruAC = thruAC - total.toFixed(2)\r\n            cashForDrawer-= thruAC;\r\n        }\r\n        const {data} = await axios.post(`orders/create`, {\r\n            session_id: active,\r\n            customer_id:'',\r\n            cash_register_id: openingCash.id,\r\n            cashForDrawer,\r\n            amount: total,\r\n            payment_mode: paymentMethod.toString(),\r\n            transaction_type:sale? 'credit':'debit', // debit in case of money & credit in case of stocks\r\n            modes: {...byAll, Cash: cashForDrawer},\r\n            returns: RETURNS,\r\n            sessionData: cartProducts[active].reduce(\r\n                (acc, { stock, id, price, unit, ...rest }) => {\r\n                    if(acc.products.indexOf(id)===-1) acc.products.push(id);\r\n                    acc.quantity[id] = ((acc.quantity[stock] || 0)-0) + (stock-0); // Increment quantity\r\n                    acc.total = total; // Accumulate total price\r\n                    acc.unit[id] = unit?? null\r\n                    acc.price[id] = rest.return ? -(acc.quantity[id] || 0) * price : (acc.quantity[id] || 0) * price\r\n                    if(id==='quick') acc.otherAmount = acc.otherAmount + parseFloat(price).toFixed(2)\r\n                    return acc;\r\n                },\r\n                { products: [], total: 0, quantity: {}, otherAmount:0, unit:{}, price:{} }\r\n            )\r\n        }, {headers});\r\n        if(data.status) {\r\n            toast.success(sale? \"Order completed!\": \"Return completed!\");\r\n            if(!sale) {\r\n                localStorage.setItem('_is_sale', 'true');\r\n                setType(true)\r\n            }\r\n            window.electronAPI?.reloadWindow({manual:true})\r\n            localStorage.setItem('cartSessions', JSON.stringify(sessions.map( item => item + 1)));\r\n            setSession(sessions.map( ite => ite + 1 ));\r\n            dispatch({ type: \"CHOOSEN_PRODUCT\" , payload: []});\r\n            dispatch(\r\n                commonApiSlice.util.updateQueryData(`getPosProducts`, undefined, cache => {\r\n                    cache['products'] = cache.products.map( product => {\r\n                        if(cartStocks.hasOwnProperty(product.id)) {\r\n                            product.quantity = sale ? product.quantity - cartStocks[product.id]: product.quantity + cartStocks[product.id]\r\n                        } \r\n                        return product;\r\n                    })\r\n                }),\r\n            )\r\n            if(data.notifications.length) {\r\n                dispatch(\r\n                    commonApiSlice.util.updateQueryData('getNotifications', undefined, cache => {\r\n                        data.notifications.forEach( notify => { \r\n                            cache['notifications'].push(notify);\r\n                        });\r\n                    })\r\n                )\r\n            }\r\n            dispatch({ type: \"STOP_LOADING\" });\r\n            if(receiptOn ) {\r\n                setKartProducts(cartProducts[active]);\r\n                await takeSnipAndPrint();\r\n            }\r\n            navigate(`/pos`);\r\n        } else {\r\n            toast.error(\"Failed to create the order!\");\r\n        }\r\n\r\n    }\r\n\r\n    const toggleReceipt = mode => {\r\n        localStorage.setItem('prt_receipt', mode)\r\n        setReceipt(mode);\r\n    }\r\n\r\n    const paid = () => Object.values(byAll).reduce((p,c)=> p+parseFloat(c),0)\r\n\r\n    useEffect(() => {\r\n        if( isSuccess ) {\r\n            setNotes([...data.notes].sort((a,b)=> (a.amount- b.amount)))\r\n        }\r\n    },[isSuccess, data]);\r\n\r\n    return (\r\n        <>\r\n     \r\n        <div className=\"content-wrapper\">\r\n\r\n            <div className=\"col-lg-12 grid-margin stretch-card\" style={{justifyContent:'space-around'}}>\r\n                <div className=\"col-lg-5\">\r\n                    <div className=\"row\" style={{height:'15rem'}}>\r\n                        <div className=\"container\">\r\n                            {[ 'Cash', 'Card', 'Account' ].map( (met,_) => <div className=\"row mt-2\" key={met}>\r\n                                <div className={`card ms-2 payment-${met.toLowerCase()} ${currentMethod===met && 'active'}`} style={mode} onClick={()=> choosePaymentMethod(met)}>\r\n                                    <div className=\"card-body\">\r\n                                        <div className=\"d-flex\" style={{alignItems:'center',gap:'5px',color:'#1e283d'}}>\r\n                                            { _ === 0 && <i className=\"mdi mdi-cash\" aria-hidden={true} />}\r\n                                            { _ === 1 && <i className=\"fa fa-credit-card\" aria-hidden={true} />}\r\n                                            { _ === 2 && <i className=\"fa fa-user\" aria-hidden={true} />} \r\n                                            <strong> <p className=\"m-0\"> {met} </p>  </strong>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>)}\r\n                        </div>\r\n                    </div>\r\n                    {<div className=\"row\">\r\n                        <div className=\"col-sm-12 d-flex\">\r\n                            <button type=\"button\" className=\" btn btn-light text-dark w-100 mt-3 justify-content-center\" style={{width:'50%',background:'',color:'white!important'}} onClick={()=>toggleReceipt(!receiptOn)} title=\"print receipt\" > \r\n                                Receipt \r\n                                <input type='checkbox' checked={receiptOn} onChange={()=>{}} /> \r\n                            </button>\r\n                        </div>\r\n                    </div>}\r\n\r\n                    { paymentMethod.length ? (<>\r\n                        <div className=\"calculator\">\r\n                            <div className=\"row mt-2 offset-2\">\r\n                                {[1,2,3].map( (btn,i) => <div className=\"col-sm-3\" key={i} onClick={()=>changeInput(btn)}>\r\n                                    <button style={{fontSize:'1.5rem'}} className=\"btn btn-light  w-100 text-dark\"> <b> {btn} </b> </button>\r\n                                </div> )}\r\n                            </div>\r\n                            <div className=\"row mt-1 offset-2\">\r\n                                {[4,5,6].map( (btn,i) => <div className=\"col-sm-3\" key={i} onClick={()=>changeInput(btn)}>\r\n                                    <button style={{fontSize:'1.5rem'}} className=\"btn btn-light  w-100 text-dark\"> <b> {btn} </b> </button>\r\n                                </div> )}\r\n                            </div>\r\n                            <div className=\"row mt-1 offset-2\">\r\n                                {[7,8,9].map( (btn,i) => <div className=\"col-sm-3\" key={i} onClick={()=>changeInput(btn)}>\r\n                                    <button style={{fontSize:'1.5rem'}} className=\"btn btn-light  w-100 text-dark\"> <b> {btn} </b> </button>\r\n                                </div> )}\r\n                            </div>\r\n                            <div className=\"row mt-1 offset-2\">\r\n                                {[0, '.'].map( it => <div key={it} className={`col-sm-3 `} onClick={()=> changeInput(it)}>\r\n                                    <button style={{fontSize:'1.5rem'}} className=\"btn btn-light w-100 text-dark\"> <b> {it} </b> </button>\r\n                                </div> )}\r\n                                <div className=\"col-sm-3\" onClick={()=> {\r\n                                    setByAll({...byAll, [currentMethod]:0});\r\n                                    setNumber('')\r\n                                }}>\r\n                                    <button style={{fontSize:'1.5rem'}} className=\"btn btn-light w-100 text-dark\"> <b> Clear </b> </button>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row mt-1\">\r\n                                <div className=\"col-sm-12 d-flex\">\r\n                                    <button type={`button`} className={`w-100 btn btn-light text-white validate`} \r\n                                        style={{width:'47%',backgroundColor: '#0d172c',opacity:1,textTransform:'uppercase'}} \r\n                                        onClick={initPayment}\r\n                                    >\r\n                                        Complete Payment\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </>)\r\n                    : null }\r\n                </div>\r\n                <div className=\"final col-lg-6\">\r\n                    <div className=\"card\">\r\n                        <div className=\"card-body\">\r\n                            <h1 className=\"text-success\" style={{textAlign:'center'}}>\r\n                                <span className=\"total-amount\">{currency + parseFloat(total).toFixed(2)}</span>\r\n                            </h1>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"card mt-3 w-100 parent\">\r\n                        <div className=\"row selections\">\r\n                            <strong className={`${paymentMethod.length && 'd-none'}`}>\r\n                                <span className=\"info\"> Please select a payment method </span>\r\n                            </strong>\r\n                            {paymentMethod.length ? ( // if any mode is selected start to display\r\n                                <>\r\n                                    { total < paid() || total === paidAmount ? (\r\n                                        <div className={`card ${paid() > total ?'fulfilled':'remaining' }`} >\r\n                                            <div className=\"card-body exception\">\r\n                                                <div className=\"d-flex\" style={{ justifyContent:'space-between'}}>\r\n                                                {\r\n                                                    total > 0 ? (<>\r\n                                                        <div className=\"d-flex\">\r\n                                                            <i className={`fa-solid fa-cash`} />\r\n                                                            <p> Return </p>\r\n                                                        </div>\r\n                                                        <b>&nbsp; {currency} {Math.abs((total - paid()).toFixed(2))}</b>\r\n                                                    </>) : (<>\r\n                                                        <div className=\"d-flex\">\r\n                                                            <i className={`fa-solid fa-cash`} />\r\n                                                            {\r\n                                                                total > 0 && paid() > total ? <b> Put back { total.toFixed(2) - paid() }</b>\r\n                                                                :(<><p> Return </p><b> &nbsp; {currency + Math.abs(total.toFixed(2) - paid())}</b></>)\r\n                                                            }\r\n                                                        </div>\r\n                                                    </>)\r\n                                                }\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>) : (\r\n                                        <div className={`card remaining`}>\r\n                                            <div className={`card-body exception`}>\r\n                                                <div className=\"d-flex\" style={{ justifyContent:'space-between' }}>\r\n                                                    <div className=\"d-flex\">\r\n                                                        <i className={`fa-solid fa-cash`} />\r\n                                                        {total > 0 ? <p>Remaining </p>: <p>Put Back</p>}\r\n                                                    </div>\r\n                                                    <b>&nbsp; {currency} {Math.abs((total - paid()).toFixed(2))}</b>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n                                    {\r\n                                        paymentMethod.map( meth => <div className={`card methods payment-${meth.toLowerCase()} ${currentMethod===meth && 'active'}`} key={meth} onClick={()=> setCurrentMethod(meth)}>\r\n                                            <div className={`card-body exception`} >\r\n                                                <div className=\"d-flex\" style={{justifyContent:'space-between'}}>\r\n                                                    <div className=\"d-flex\"> \r\n                                                        <p> { meth } </p>\r\n                                                    </div>\r\n                                                    <div className=\"d-flex\">\r\n                                                        &nbsp;{currency} &nbsp;<b className=\"price\" > {byAll[meth]}</b>\r\n                                                        <i className=\"mdi mdi-close mx-3\" style={{cursor:'pointer'}} onClick={()=>setPaymentMethod(()=>{ \r\n                                                            setByAll({...byAll, [meth]:0})\r\n                                                            return paymentMethod.filter(ite => ite !== meth)\r\n                                                        })} />\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>) \r\n                                    }\r\n                                </>\r\n                            ): null}\r\n                        </div>\r\n                    </div>\r\n                    <div className={`container`}>\r\n                        <div className={`row`}>\r\n                            {[5,10,20,50,100,200].map((note) => (\r\n                                <div className=\"col-sm-4 mt-1\" key={note} style={{maxHeight:'110px',cursor:'pointer'}} onClick={()=>choosePaymentMethod('Cash', note)}>\r\n                                    {/* <img src={process.env.REACT_APP_BACKEND_URI+'images/'+note.image} alt={''} style={{width:'100%',height:'100%',borderRadius:10}} /> */}\r\n                                    <div className={'text-center bg-white'} style={{width:'100%',height:'100px',borderRadius:10, border:'1px solid',placeContent:'center'}} >\r\n                                        <h2> <b>EUR {note}</b> </h2>\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/* Receipt Area */}\r\n            {<div className={`col-lg-5 ms-4 ${receiptOn ?'':'d-none'}`} id=\"receipt\" >\r\n                <div className=\"container\" style={{backgroundColor:'white',paddingBottom:40,borderRadius:15,alignSelf:'center'}} >\r\n                    <div className=\"row d-flex w-100\">\r\n                        <div style={{justifyContent:'center',display:'grid',textAlign:'center',width:'100%'}}>\r\n                            <img src={pos} alt=\"\" style={{marginTop:30, filter:'grayscale(1)'}} height={150}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\" ref={targetDiv} style={{justifyContent:'center'}}>\r\n                        <div>\r\n                            <div style={{textAlign:'center',marginTop:10}}> \r\n                                <h5 style={{textTransform:'uppercase',fontFamily:'Manrope, sans-serif'}}>\r\n                                    <b style={{paddingTop:10}}>&#x260E;: 070-3563062</b><br/>\r\n                                    <span>&#x1F6D2;</span>Hobbemaplein 50 <br/> 2526 JB Den Haag, Netherlands<br/>\r\n                                </h5>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"receipt\" style={{width:'90%',background:'#fff'}}>\r\n                            {\r\n                                cartProducts[active]?.map( product => <div key={product.id} className='row' style={chosenStyle}>\r\n                                    <div style={{ display:'flex',width:'100%',justifyContent:'space-between'}}>\r\n                                        <b style={{fontSize: product.name.length > 35?'medium':'larger',fontWeight:900,maxWidth:'80%',fontFamily:'Manrope, sans-serif'}}>{product.name}</b>\r\n                                        <strong className='price' style={{fontSize:'large', whiteSpace:'nowrap'}}>\r\n                                            { `${product.return?'- ':''}` + currency + ' ' + parseFloat(product.stock * product.price).toFixed(2) }\r\n                                        </strong>\r\n                                    </div>\r\n                                    <div className='toHide' style={{fontSize:'larger',width:'100%',fontWeight:900,display:'flex',justifyContent:'space-between'}}>\r\n                                        <span style={{fontFamily:'Manrope, sans-serif'}}> \r\n                                            {(!product.other ? currency + parseFloat(product.price).toFixed(2) + (product.unit? `/ ${product.unit}`:  '/ Units'):'')} \r\n                                        </span>\r\n                                        <span style={{fontFamily:'Manrope, sans-serif'}}> Qty: {parseFloat(product.stock).toFixed(2)} {product.unit? product.unit : \"\"}</span>\r\n                                    </div>\r\n                                </div>\r\n                                )\r\n                            }\r\n                           <h1 style={{cssText:\"font-size:1.75rem!important;font-weight:600;font-family:Manrope, sans-serif\"}}> TOTAL &nbsp; {currency + ' ' + parseFloat(total).toFixed(2) }</h1> \r\n                        </div>\r\n                        <p style={{paddingTop:10,fontFamily:\"Manrope, sans-serif\"}}>Thank you! Visit Again!</p>\r\n                    </div>\r\n                </div>\r\n            </div>}\r\n        </div>\r\n        </>\r\n        \r\n    )\r\n}\r\n","import $ from 'jquery'\r\nimport toast from 'react-hot-toast';\r\nconst daysOfWeek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\nexport const validate = (fields,exceptions=[]) => {\r\n    let result={}\r\n    var shouldGo=true;\r\n    if(exceptions.length)\r\n    {\r\n        exceptions.forEach( item => {\r\n            delete fields[item]\r\n        })\r\n    }\r\n    Object.keys(fields).forEach(f =>\r\n    {\r\n        let shout = '';\r\n        let invalid = false;\r\n        let tInputs = [$(`input[name=${f}]`), $(`select[name=${f}]`), $(`textarea[name=${f}]`), $(`.${f}`)]\r\n        if(fields[f]==null || fields[f].length===0)\r\n        {\r\n            result[f]=`Required!`;\r\n            shouldGo=false;\r\n            invalid = true;\r\n        }\r\n        tInputs.forEach( input => {\r\n\r\n            let minLength = $(input).attr('type')!== 'date' ? $(input).attr('min'): 0;\r\n            let maxLength = $(input).attr('max');\r\n            let type = $(input).attr('cast');\r\n            let isDate = $(input).attr('type')==='date' && $(input).attr('req');\r\n            if($(input).val()?.length && (minLength || maxLength))\r\n            {\r\n                if($(input).val().length < parseInt(minLength))\r\n                { \r\n                    invalid = true;\r\n                    shout = `Should be of at least ${minLength} characters!`\r\n                    result[f] = shout;\r\n                }\r\n                if($(input).val().length > parseInt(maxLength))\r\n                { \r\n                    invalid = true;\r\n                    shout = `Should not be greater than ${maxLength} characters!`;\r\n                    result[f] = shout;\r\n                }\r\n            }\r\n            if(type)\r\n            { \r\n                if(input.val() && type === 'num')\r\n                {\r\n                    if(parseInt($(input).val().length )!== $(input).val().length) {\r\n                        shout= `Should be in numbers!`;\r\n                        invalid = true;\r\n                        result[f]= shout; \r\n                    }\r\n                }\r\n                if( $(input).val() && type=== 'str' )\r\n                {\r\n                    if( /^([^0-9]*)$/.test($(input).val())===false )\r\n                    {\r\n                        shout= `Should not contain numbers!`;\r\n                        invalid = true;\r\n                        result[f]= shout; \r\n                    }\r\n                }\r\n            }\r\n            if(isDate)\r\n            {\r\n                if(!isValidDate($(input).val(),18))\r\n                {\r\n                    invalid = true\r\n                    shout = 'Invalid date';\r\n                    result[f] = shout;\r\n                } else {\r\n                    shout = '';\r\n                }\r\n                // return\r\n            }\r\n            if(shout)   \r\n            {\r\n                if($(input).parents('.col-md-12, .col').find('small.text-danger').length)\r\n                {\r\n                    $(input).parents('.col-md-12, .col').find('small.text-danger').text(shout)\r\n                } else {\r\n                    $(input).parents('.col-md-12, .col').append('<small class=\"text-danger\">'+shout+'</small>')\r\n                }\r\n            } else {\r\n                $(input).parents('.col-md-12, .col').find('small.text-danger').remove()\r\n            }\r\n            if(invalid){\r\n                shouldGo = false;\r\n                $(input).addClass('placeholder-error')\r\n                .attr('placeholder',result[f]).css('border','1px solid red');\r\n            } else {\r\n                $(input).removeClass('placeholder-error').attr('placeholder',result[f]).css('border','');\r\n            }\r\n        })\r\n    })\r\n    return {result, shouldGo};\r\n}\r\n\r\nexport const getCurrentDate = (delimiter='-') => {\r\n    const today = new Date();\r\n    const year = today.getFullYear();\r\n    const month = String(today.getMonth() + 1).padStart(2, '0'); // Months are 0-based\r\n    const day = String(today.getDate()).padStart(2, '0');\r\n    return `${year+delimiter+month+delimiter+day}`;\r\n}\r\n\r\nexport const formatDate = (date=null,format='Ymd') => {\r\n    const dateObj = date?new Date(date): new Date();\r\n    const year = dateObj.getFullYear();\r\n    const month = String(dateObj.getMonth() + 1).padStart(2, '0'); // Months are 0-based\r\n    const day = String(dateObj.getDate()).padStart(2, '0');\r\n    if(format[0]==='Y')\r\n    {\r\n        return `${year}-${month}-${day}`;\r\n    }\r\n    if(format[0]==='d')\r\n    {\r\n        return `${day}-${month}-${year}`;\r\n    }\r\n}\r\n\r\nexport const getCurrentDay = () => {\r\n    return daysOfWeek[(new Date()).getDay()];\r\n}\r\n\r\nexport const getCurrentTime = () => {\r\n    const currentDate = new Date();\r\n    const hours = String(currentDate.getHours()).padStart(2, '0');\r\n    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r\n    const seconds = String(currentDate.getSeconds()).padStart(2, '0');\r\n    return `${hours}:${minutes}:${seconds}`;\r\n}\r\nexport const toBase64 = blob => {\r\n\r\n}\r\n\r\nexport const dataURLtoFile = (dataurl, filename) => {\r\n    var arr = dataurl.split(','),\r\n        mime = arr[0].match(/:(.*?);/)[1],\r\n        bstr = atob(arr[arr.length - 1]), \r\n        n = bstr.length, \r\n        u8arr = new Uint8Array(n);\r\n    while(n--){\r\n        u8arr[n] = bstr.charCodeAt(n);\r\n    }\r\n    return new File([u8arr], filename, {type:mime});\r\n}\r\n\r\nexport const isValidDate = ( date, range ) => {\r\n    let today = getCurrentDate();\r\n    let year = today.split('-')[0];\r\n    let intended = new Date(today.replace(year, (parseInt(year)-range)));\r\n    return intended > new Date(date)\r\n}\r\n\r\nexport const capitalFirst = (string) => {\r\n    if (!string) return string; // Handle empty or null strings\r\n    if(string.includes(' ')){\r\n        let str= '';\r\n        string.split(' ').forEach( part => {\r\n           str+=' '+ part.charAt(0).toUpperCase() + part.slice(1); \r\n        })\r\n        return str;\r\n    }\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\nexport const getDocumentName = id => {\r\n\r\n    const documents = {\r\n        1 : 'VISIT PHOTO',\r\n        2 : 'AADHAAR CARD',\r\n        3 : 'VOTER CARD',\r\n        4 : 'GROUP PHOTO',\r\n        5 : 'CGT_FIRST',\r\n        6 : 'CGT_SECOND',\r\n        7 : 'CIBIL',\r\n        8 : 'SANCTION LETTER',\r\n        9 : 'KYC',\r\n        10 : 'BANK PASSBOOK',\r\n        11 : 'RELATION PROOF DOCUMENT',\r\n    }\r\n    return documents[id];\r\n    \r\n}\r\n\r\nexport const Warning = msg => {\r\n    return toast(msg,\r\n        {\r\n          icon: '⚠️',\r\n          style: {\r\n            borderRadius: '10px',\r\n            background: '#333',\r\n            color: '#fff',\r\n          },\r\n        }\r\n    );\r\n}\r\n\r\nexport const hexToRgb = (hex) => {\r\n    // Remove the '#' if present\r\n\r\n    if(!hex || typeof hex == 'object'){\r\n        return hex\r\n    }\r\n\r\n    hex = hex.replace(/^#/, '');\r\n    // Convert shorthand hex (e.g., #03F) to full form (e.g., #0033FF)\r\n    if (hex.length === 3) {\r\n        hex = hex.split('').map(h => h + h).join('');\r\n    }\r\n    // Convert hex to RGB\r\n    const r = parseInt(hex.slice(0, 2), 16);\r\n    const g = parseInt(hex.slice(2, 4), 16);\r\n    const b = parseInt(hex.slice(4, 6), 16);\r\n\r\n    return { r, g, b };\r\n}\r\n\r\nexport const isColorDark = (hexColor) => {\r\n    // Convert hex color to RGB\r\n    let output = hexToRgb(hexColor)\r\n    if(output === undefined) return hexColor\r\n    const { r, g, b } = output\r\n\r\n    // Calculate the luminance\r\n    const luminance = 0.299 * r + 0.587 * g + 0.114 * b;\r\n\r\n    // Return true if the color is dark, else false\r\n    return luminance < 128;\r\n}\r\n\r\nexport function chunk(array, size, uncategorized = false) {\r\n    const result = [];\r\n    if(!array) return []\r\n    if(uncategorized) array.unshift({})\r\n    for (let i = 0; i < array.length; i += size) {\r\n        // Use slice to get a chunk of the specified size and push it to the result array\r\n        result.push(array.slice(i, i + size));\r\n    }\r\n    return result;\r\n}\r\n\r\nexport const wrapText = (text, maxLength) => {\r\n\r\n    if (text?.length > maxLength) {\r\n        let truncatedText = text.substring(0, maxLength) + '...';\r\n        return truncatedText;\r\n    }\r\n    return text\r\n}\r\n\r\nexport const formatDatefromTimestamp = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are zero-based\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    const hours = String(date.getHours()).padStart(2, '0');\r\n    const minutes = String(date.getMinutes()).padStart(2, '0');\r\n    const seconds = String(date.getSeconds()).padStart(2, '0');\r\n    return `${year}-${month}-${day} ${hours}:${minutes}`;\r\n};\r\n  \r\nexport const f = value => parseFloat(value).toFixed(2)"],"names":["RETURNS","Payment","_localStorage$getItem","_cartProducts$active3","headers","localStorage","getItem","targetDiv","useRef","chosenStyle","marginTop","alignItems","borderRadius","border","minHeight","backgroundColor","position","navigate","useNavigate","active","useParams","receiptOn","setReceipt","useState","JSON","parse","data","isSuccess","useGetNotesQuery","setSession","sessions","sale","setType","useSearch","byAll","setByAll","Cash","Card","Account","dispatch","useDispatch","mode","width","cursor","currency","cartProducts","openingCash","cartStocks","useSelector","state","auth","notes","setNotes","paymentMethod","setPaymentMethod","paidAmount","setPaid","KartProducts","setKartProducts","currentMethod","setCurrentMethod","number","setNumber","choosePaymentMethod","method","note","arguments","length","undefined","previous","parseFloat","total","_objectSpread","parseInt","fillAmt","paid","toFixed","includes","changeInput","input","newAmount","showTotal","_cartProducts$active","_KartProducts$active","additions","returns","_cartProducts$active2","filter","_","return","reduce","acc","cur","stock","price","Object","values","p","c","useEffect","sort","a","b","amount","_jsx","_Fragment","children","_jsxs","className","style","justifyContent","height","map","met","concat","toLowerCase","onClick","gap","color","type","background","setItem","toggleReceipt","title","checked","onChange","btn","i","fontSize","it","opacity","textTransform","async","Warning","f","cashForDrawer","reducible","thruAC","axios","post","session_id","customer_id","cash_register_id","id","payment_mode","toString","transaction_type","modes","sessionData","_ref","unit","rest","_objectWithoutProperties","_excluded","products","indexOf","push","quantity","otherAmount","_window$electronAPI","status","toast","success","window","electronAPI","reloadWindow","manual","stringify","item","ite","payload","commonApiSlice","util","updateQueryData","cache","product","hasOwnProperty","notifications","forEach","notify","elem","current","error","printContent","html","innerHTML","console","takeSnipAndPrint","textAlign","Math","abs","meth","maxHeight","placeContent","paddingBottom","alignSelf","display","src","pos","alt","ref","fontFamily","paddingTop","name","fontWeight","maxWidth","whiteSpace","other","cssText","dataURLtoFile","dataurl","filename","arr","split","mime","match","bstr","atob","n","u8arr","Uint8Array","charCodeAt","File","capitalFirst","string","str","part","charAt","toUpperCase","slice","msg","icon","hexToRgb","hex","replace","h","join","r","g","isColorDark","hexColor","output","chunk","array","size","result","unshift","wrapText","text","maxLength","substring","formatDatefromTimestamp","timestamp","date","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","getSeconds","value"],"sourceRoot":""}